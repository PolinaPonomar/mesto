(()=>{"use strict";function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var e=function(){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),this._url=t.url,this.headers=t.headers}var n,r;return n=e,(r=[{key:"_onError",value:function(t){return t.ok?t.json():Promise.reject("Ошибка: ".concat(t.status))}},{key:"getUserInfo",value:function(){return fetch("".concat(this._url,"users/me"),{method:"GET",headers:this.headers}).then(this._onError)}},{key:"getInitialCards",value:function(){return fetch("".concat(this._url,"cards"),{method:"GET",headers:this.headers}).then(this._onError)}},{key:"renewUserInfo",value:function(t){return fetch("".concat(this._url,"users/me"),{method:"PATCH",headers:this.headers,body:JSON.stringify({name:t.name,about:t.description})}).then(this._onError)}},{key:"postNewCard",value:function(t){return fetch("".concat(this._url,"cards"),{method:"POST",headers:this.headers,body:JSON.stringify({name:t.name,link:t.link,alt:t.alt})}).then(this._onError)}},{key:"deleteCard",value:function(t){return fetch("".concat(this._url,"cards/").concat(t),{method:"DELETE",headers:this.headers}).then(this._onError)}},{key:"putLike",value:function(t){return fetch("".concat(this._url,"cards/likes/").concat(t),{method:"PUT",headers:this.headers}).then(this._onError)}},{key:"deleteLike",value:function(t){return fetch("".concat(this._url,"cards/likes/").concat(t),{method:"DELETE",headers:this.headers}).then(this._onError)}},{key:"changeAvatar",value:function(t){return fetch("".concat(this._url,"users/me/avatar"),{method:"PATCH",headers:this.headers,body:JSON.stringify({avatar:t})}).then(this._onError)}}])&&t(n.prototype,r),e}();function n(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var r=function(){function t(e,n,r,o){var i=o.handleCardClick,a=o.handleDeleteClick,c=o.handleLikeClick;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._link=e.link,this._name=e.name,this._alt=e.alt,this._ownerId=e.owner._id,this._cardId=e._id,this._likesNumber=e.likes.length,this._likedUsers=e.likes.map((function(t){return t._id})),this._accountId=n,this._cardSelector=r,this._handleCardClick=i,this._handleDeleteClick=a,this._handleLikeClick=c,this._element=this._getTemplate(),this._likeButton=this._element.querySelector(".card__like-button"),this._likeСounter=this._element.querySelector(".card__likes-number"),this._deleteButton=this._element.querySelector(".card__delete-button"),this._photo=this._element.querySelector(".card__photo"),this._photoText=this._element.querySelector(".card__text")}var e,r;return e=t,(r=[{key:"_getTemplate",value:function(){var t=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0);return this._ownerId!==this._accountId&&t.querySelector(".card__delete-button").remove(),t}},{key:"_setEventListeners",value:function(){var t=this;this._likeButton.addEventListener("click",(function(){t._handleLikeClick(t._cardId,t._likeButton,t._likeСounter)})),this._ownerId==this._accountId&&this._deleteButton.addEventListener("click",(function(){t._handleDeleteClick(t._element,t._cardId)})),this._photo.addEventListener("click",(function(){t._handleCardClick(t._link,t._alt,t._name)}))}},{key:"generateCard",value:function(){var t=this;return this._photoText.textContent=this._name,this._photo.src=this._link,this._photo.alt=this._alt,this._likeСounter.textContent=this._likesNumber,this._likedUsers.some((function(e){return e==t._accountId}))&&this._likeButton.classList.add("card__like-button_active"),this._setEventListeners(),this._element}}])&&n(e.prototype,r),t}();function o(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var i=function(){function t(e,n){var r=e.renderer;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._renderer=r,this._container=document.querySelector(n)}var e,n;return e=t,(n=[{key:"renderItems",value:function(t){var e=this;t.forEach((function(t){return e._renderer(t)}))}},{key:"addItem",value:function(t){this._container.prepend(t)}}])&&o(e.prototype,n),t}();function a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var c=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._popup=document.querySelector(e),this._closeButton=this._popup.querySelector(".popup__close-button"),this._popupContainer=this._popup.querySelector(".popup__container"),this._handleEscClose=this._handleEscClose.bind(this)}var e,n;return e=t,(n=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"_handleEscClose",value:function(t){"Escape"===t.key&&this.close()}},{key:"setEventListeners",value:function(){var t=this;this._closeButton.addEventListener("click",this.close.bind(this)),this._popup.addEventListener("click",(function(e){e.target!==t._popup&&e.target!==t._popupContainer||t.close()}))}}])&&a(e.prototype,n),t}();function u(t){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function s(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function l(t,e,n){return(l="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=h(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function f(t,e){return(f=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function p(t,e){return!e||"object"!==u(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function h(t){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var _=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&f(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=h(r);if(o){var n=h(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return p(this,t)});function a(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(e=i.call(this,t))._popupPhoto=e._popup.querySelector(".popup__photo"),e._popupPhotoName=e._popup.querySelector(".popup__photo-name"),e}return e=a,(n=[{key:"open",value:function(t,e,n){this._popupPhoto.src=t,this._popupPhoto.alt=e,this._popupPhotoName.textContent=n,l(h(a.prototype),"open",this).call(this)}}])&&s(e.prototype,n),a}(c);function d(t){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function y(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function v(t,e,n){return(v="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=k(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function m(t,e){return(m=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function b(t,e){return!e||"object"!==d(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function k(t){return(k=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var S=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&m(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=k(r);if(o){var n=k(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return b(this,t)});function a(t,e){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,t))._handlerFormSubmit=e,n._form=n._popup.querySelector(".popup__form"),n._inputList=n._form.querySelectorAll(".popup__form-item"),n._submitButton=n._form.querySelector(".popup__save-button"),n._startSubmitButtonText=n._submitButton.textContent,n}return e=a,(n=[{key:"checkloading",value:function(t){this._submitButton.textContent=t?"Сохранение...":this._startSubmitButtonText}},{key:"_getInputValues",value:function(){var t={};return this._inputList.forEach((function(e){t[e.name]=e.value})),t}},{key:"_submit",value:function(t){t.preventDefault(),this._handlerFormSubmit(this._getInputValues())}},{key:"setEventListeners",value:function(){v(k(a.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",this._submit.bind(this))}},{key:"close",value:function(){v(k(a.prototype),"close",this).call(this),this._form.reset()}}])&&y(e.prototype,n),a}(c);function g(t){return(g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function E(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function w(t,e,n){return(w="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=L(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function C(t,e){return(C=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function O(t,e){return!e||"object"!==g(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function L(t){return(L=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var P=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&C(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=L(r);if(o){var n=L(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return O(this,t)});function a(t,e){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,t))._handlerFormSubmit=e,n._form=n._popup.querySelector(".popup__form"),n}return e=a,(n=[{key:"_submit",value:function(t){t.preventDefault(),this._handlerFormSubmit(this._card,this._cardId)}},{key:"open",value:function(t,e){w(L(a.prototype),"open",this).call(this),this._card=t,this._cardId=e}},{key:"setEventListeners",value:function(){w(L(a.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",this._submit.bind(this))}}])&&E(e.prototype,n),a}(c);function j(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var I={formSelector:".popup__form",inputSelector:".popup__form-item",submitButtonSelector:".popup__save-button",inactiveButtonClass:"popup__save-button_invalid",inputErrorClass:"popup__form-item_type_error"},q=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._form=n,this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._inputList=Array.from(this._form.querySelectorAll(this._inputSelector)),this._button=this._form.querySelector(this._submitButtonSelector)}var e,n;return e=t,(n=[{key:"_showError",value:function(t){var e=this._form.querySelector(" #".concat(t.id,"-error"));t.classList.add(this._inputErrorClass),e.textContent=t.validationMessage}},{key:"_hideError",value:function(t){var e=this._form.querySelector(" #".concat(t.id,"-error"));t.classList.remove(this._inputErrorClass),e.textContent=""}},{key:"_checkInputValidity",value:function(t){t.validity.valid?this._hideError(t):this._showError(t)}},{key:"_toggleButtonState",value:function(){this._form.checkValidity()?(this._button.classList.remove(this._inactiveButtonClass),this._button.disabled=!1):(this._button.classList.add(this._inactiveButtonClass),this._button.disabled=!0)}},{key:"_setEventListeners",value:function(){var t=this;this._inputList.forEach((function(e){e.addEventListener("input",(function(){t._checkInputValidity(e),t._toggleButtonState()}))}))}},{key:"enableValidation",value:function(){this._form.addEventListener("submit",(function(t){t.preventDefault()})),this._setEventListeners()}},{key:"_resetPassedValidation",value:function(){var t=this;this._inputList.forEach((function(e){t._hideError(e)}))}},{key:"doStartValidity",value:function(){this._toggleButtonState(),this._resetPassedValidation()}}])&&j(e.prototype,n),t}();function T(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var R=function(){function t(e){var n=e.nameSelector,r=e.descriptionSelector,o=e.avatarSelector;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._name=document.querySelector(n),this._description=document.querySelector(r),this._avatar=document.querySelector(o)}var e,n;return e=t,(n=[{key:"getUserInfo",value:function(){return{name:this._name.textContent,description:this._description.textContent,avatar:this._avatar.src,id:this._id}}},{key:"setUserId",value:function(t){this._id=t}},{key:"setUserAvatar",value:function(t){this._avatar.src=t}},{key:"setUserInfo",value:function(t,e){this._name.textContent=t,this._description.textContent=e}}])&&T(e.prototype,n),t}(),x=document.querySelector(".profile__edit-button"),B=document.querySelector(".profile__avatar-wrapper"),U=document.querySelector(".profile__add-button"),D=document.querySelector(".popup_profile"),A=D.querySelector(".popup__form-item_value_name"),V=D.querySelector(".popup__form-item_value_description"),N=D.querySelector(".popup__form"),F=document.querySelector(".popup_avatar").querySelector(".popup__form"),J=document.querySelector(".popup_cards").querySelector(".popup__form");function G(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var H=new e({url:"https://mesto.nomoreparties.co/v1/cohort-20/",headers:{authorization:"4ea02280-fa61-4e20-88ce-aa4e93f95126","Content-Type":"application/json"}}),M=new R({nameSelector:".profile__name",descriptionSelector:".profile__description",avatarSelector:".profile__avatar"}),z=new _(".popup_image");z.setEventListeners();var $=new P(".popup_confirm",(function(t,e){H.deleteCard(e).then((function(e){t.remove()})).catch((function(t){console.log(t)})),$.close()}));$.setEventListeners();var K=new i({renderer:function(t){var e=new r(t,M.getUserInfo().id,"#card-template",{handleCardClick:function(t,e,n){z.open(t,e,n)},handleDeleteClick:function(t,e){$.open(t,e)},handleLikeClick:function(t,e,n){e.classList.toggle("card__like-button_active"),e.classList.contains("card__like-button_active")?H.putLike(t).then((function(t){n.textContent=t.likes.length})):H.deleteLike(t).then((function(t){n.textContent=t.likes.length}))}}).generateCard();K.addItem(e)}},".cards");Promise.all([H.getUserInfo(),H.getInitialCards()]).then((function(t){var e,n,r=(n=2,function(t){if(Array.isArray(t))return t}(e=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=t[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}}(e,n)||function(t,e){if(t){if("string"==typeof t)return G(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?G(t,e):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];M.setUserInfo(o.name,o.about),M.setUserAvatar(o.avatar),M.setUserId(o._id),i.forEach((function(t){t.alt="Фотография с подписью: "+t.name})),i.reverse(),K.renderItems(i)})).catch((function(t){console.log(t)}));var Q=new S(".popup_profile",(function(t){Q.checkloading(!0),H.renewUserInfo(t).then((function(t){M.setUserInfo(t.name,t.about)})).catch((function(t){console.log(t)})).finally((function(){Q.checkloading(!1)})),Q.close()}));Q.setEventListeners();var W=new S(".popup_avatar",(function(t){W.checkloading(!0),H.changeAvatar(t.link).then((function(t){M.setUserAvatar(t.avatar)})).catch((function(t){console.log(t)})).finally((function(){W.checkloading(!1)})),W.close()}));W.setEventListeners();var X=new S(".popup_cards",(function(t){X.checkloading(!0);var e={name:t.title,link:t.link,alt:"Фотография с подписью: "+t.title};H.postNewCard(e).then((function(t){t.alt="Фотография с подписью: "+t.name,K.renderItems([t])})).catch((function(t){console.log(t)})).finally((function(){X.checkloading(!1)})),X.close()}));X.setEventListeners();var Y=new q(I,N);Y.enableValidation();var Z=new q(I,F);Z.enableValidation();var tt=new q(I,J);tt.enableValidation(),x.addEventListener("click",(function(){Q.open(),A.value=M.getUserInfo().name,V.value=M.getUserInfo().description,Y.doStartValidity()})),B.addEventListener("click",(function(){W.open(),Z.doStartValidity()})),U.addEventListener("click",(function(){X.open(),tt.doStartValidity()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,